module System.Cron.Internal.DescribeUtils where
-- (
--   viewHour
-- , viewMinute
-- , viewMinuteRange
-- , viewHourList
-- , Month(..)
-- , safeIntToMonth
-- , Weekday(..)
-- , safeIntToWeekDay
-- , allWords
-- , cap
-- , joinWords
-- ) where
--
-- import           Data.Char               (toUpper)
-- import           Data.List.NonEmpty      (NonEmpty)
-- import           System.Cron.Types
-- import           System.Cron.Internal.Describe.Time
-- --
-- --
-- -- leftPad :: Int -> String
-- -- leftPad n = if n < 10 then "0" ++ show n else show n
--
-- viewHour :: HourSpec -> Maybe Hour
-- viewHour = viewSpecificTime Hour . hourSpec
--
-- viewMinute :: MinuteSpec -> Maybe Minute
-- viewMinute = viewSpecificTime Minute . minuteSpec
--
-- viewMinuteRange :: MinuteSpec -> Maybe (Minute, Minute)
-- viewMinuteRange = viewRange . minuteSpec
--   where viewRange (Field (RangeField' rf)) = Just (Minute $ rfBegin rf,
--                                                    Minute $ rfEnd rf)
--         viewRange _                        = Nothing
--
-- viewHourList :: HourSpec -> Maybe (NonEmpty BaseField)
-- viewHourList = viewList . hourSpec
--   where viewList (ListField ne) = Just ne
--         viewList _              = Nothing
--
-- viewSpecificTime :: (Int -> a) -> CronField -> Maybe a
-- viewSpecificTime f (Field (SpecificField' s)) = Just . f $ specificField s
-- viewSpecificTime _ _                          = Nothing
--
-- -- viewSF :: CronField -> Maybe SpecificField
-- -- viewSF (Field (SpecificField' s)) = Just s
-- -- viewSF _                          = Nothing
-- --
-- --
-- -- viewRD :: CronField -> Maybe RangeField
-- -- viewRD (Field (RangeField' r)) = Just r
-- -- viewRD _                       = Nothing
-- --
-- --
-- -- viewList :: CronField -> Maybe (NonEmpty BaseField)
-- -- viewList (ListField l) = Just l
-- -- viewList _             = Nothing
--
-- --
-- -- data Month = January | February | March     | April   | May      | June     |
-- --              July    | August   | September | October | November | December
-- --              deriving (Enum, Bounded, Show)
-- --
-- --
-- -- safeIntToMonth :: Int -> Month
-- -- safeIntToMonth = toEnum . subtract 1 . min 12 . max 1
-- --
-- --
-- -- data Weekday = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday
-- --              deriving (Enum, Bounded, Show)
-- --
-- --
-- -- safeIntToWeekDay :: Int -> Weekday
-- -- safeIntToWeekDay = toEnum . subtract 1 . min 12 . max 1
--
--
-- allWords :: [String] -> String
-- allWords = unwords . filter (not . null)
-- --
-- --
-- -- type HourFormatter = (Int -> String)
--
--
-- -- toHour :: Int -> String
--
--
-- --
-- -- time :: HourFormatter -> Int -> SpecificField -> String
-- -- time hf minute' hourF = hf (specificField hourF) ++ ":" ++ leftPad minute'
-- --
-- --
-- -- formatTime :: HourFormatter -> SpecificField -> SpecificField -> String
-- -- formatTime hf minuteF hourF = time hf (specificField minuteF) hourF
--
--
-- cap :: String -> String
-- cap []     = []
-- cap (x:xs) = toUpper x : xs
--
--
-- joinWords :: [String] -> String
-- joinWords [] = []
-- joinWords [x] = x
-- joinWords [x, y] = x ++ " and " ++ y
-- joinWords (x:xs) = x ++ ", " ++ joinWords xs
